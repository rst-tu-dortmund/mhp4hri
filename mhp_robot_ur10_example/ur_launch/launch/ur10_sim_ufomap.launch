<?xml version="1.0" ?>
<launch>
<!-- Required for publishing rosbag always at the same point and not having a moving map (only in rosbag mode) -->
<node pkg="tf" type="static_transform_publisher" name="fixed_map" args=" 1.3718 0.162617 0.7059 -1.57 0 3.14 world fixed_depth_camera 100" /> 

<arg name="camera_type" default="rosbag" /> <!-- Set camera type. Options are "intel_realsense", "azure_kinect" or "rosbag" for replaying a previously recorded dataset -->

<!-- Set arguments depending on camera type -->
<arg name="pc_topic_name" value="/points2" if="$(eval camera_type== 'azure_kinect')"/>
<arg name="pc_topic_name" value="/camera/depth/color/points" if="$(eval camera_type== 'intel_realsense')"/>
<arg name="pc_topic_name" value="/rosbag_pcl/rosbag_pcl_play_node/points_stamped" if="$(eval camera_type== 'rosbag')"/>

<arg name="pc_frame_name" value="depth_camera_link" if="$(eval camera_type== 'azure_kinect')"/>
<arg name="pc_frame_name" value="camera_link" if="$(eval camera_type== 'intel_realsense')"/>

<arg name="num_startpoints" default="500" />
<arg name="num_scaling_gridpoints" default="100" />

<arg name="nbv_goals" value="false" />
<arg name="publish_gain" value="true" />
<!-- ur10 visualization launch node -->

<group if="$(eval camera_type== 'azure_kinect')">
  <!-- Azure Kinect node -->
  <include file="$(find azure_kinect_ros_driver)/launch/driver.launch">
    <arg name="tf_prefix"                   value="" />  <!-- Prefix added to tf frame IDs. It typically contains a trailing '_' unless empty. -->
    <arg name="overwrite_robot_description" value="false" /> <!-- Flag to publish a standalone azure_description instead of the default robot_descrition parameter--> 
    <arg name="depth_mode"                  value="NFOV_UNBINNED" /> <!-- Set the depth camera mode, which affects FOV, depth range, and camera resolution. See Azure Kinect documentation for full details. Valid options: NFOV_UNBINNED, NFOV_2X2BINNED, WFOV_UNBINNED, WFOV_2X2BINNED, and PASSIVE_IR -->
    <arg name="color_enabled"               value="false" />           <!-- Enable or disable the color camera -->
    <arg name="fps"                         value="30" />              <!-- FPS to run both cameras at. Valid options are 5, 15, and 30 -->
    <arg name="rgb_point_cloud"             value="false" />           <!-- Colorize the point cloud using the RBG camera. Requires color_enabled and depth_enabled -->
  </include>  

  <!-- Static Transform Publisher between world (UR10) & azure kinect -->
  <node pkg="tf" type="static_transform_publisher" name="world_azure" args=" 0.0 0.0 0.06 -1.57 0 0 ee_link camera_base 100" />
</group>

<group if="$(eval camera_type== 'intel_realsense')">
  <!-- Intel realsense node -->
  <include file="$(find realsense2_camera)/launch/rs_camera.launch">
    <arg name="enable_pointcloud" value="true" /> 
    <arg name="initial_reset" value="true" /> <!-- Reset camera on startup, else a freezing OS occured sometimes -->
  </include>  

  <!-- Static Transform Publisher between world (UR10) & realsense -->
  <node pkg="tf" type="static_transform_publisher" name="world_realsense" args=" 0.0 0.0 0.06 -1.57 0 0 ee_link camera_link 100" />
</group>

<group if="$(eval camera_type== 'rosbag')" ns="rosbag_pcl">
  <!-- <param name="use_sim_time" value="false" /> -->
  <!-- <node pkg="tf" type="static_transform_publisher" name="world_rosbag" args=" 0.0 0.0 0.0 0.0 0.0 0.0 camera_3d_frame_points depth_camera_link 1" /> -->
  <param name="rosbag_name" value="$(find ufomap_bundled)/config/pcl_test_data.bag" />
  <param name="bag_loop" value="true" />
  <param name="bag_start_time" value="0" />


  <!-- rosbag play node -->
  <node pkg="pcl_filters" type="rosbag_pcl_play_node" name="rosbag_pcl_play_node" output="screen" />

  <node pkg="rosservice" type="rosservice" name="rosservice" args="call --wait /rosbag_pcl/rosbag_pcl_play_node/start_pcl_replay true"/>

  <!-- Static Transform Publisher between world (UR10) & realsense -->
  <!-- <node pkg="rosbag" type="record" name="recorder" output="log" args="-o bag_res_0.01_out0.1_10 /filtered_cloud /occupied_cells_vis_array" required="false"/>  -->
  <!-- <node pkg="octomap_server" type="octomap_saver" name="octomap_saver" output="screen" args="-f map_res_0.01_out0.1_10.bt" required="true" launch-prefix="bash -c 'sleep 32; $0 $@' "/> -->
</group>

<!-- point cloud filtering node> -->
<node name="filter_node" pkg="pcl_filters" type="filter_node" output="screen">
  <!-- Decide which filters are applied -->
  <param name="downsampling" value="true" />
  <param name="remove_outliers" value="false" />

  <!-- Parameters for downsampling and outlier removing-->
  <param name="voxel_leaf_size" value="0.01" /> 
  <param name="outlier_radius" value="0.01" />
  <param name="outlier_min_neighbors" value="2" /> <!-- Higher values significantly decrease the filter frequency -->

  <remap from="input" to="$(arg pc_topic_name)" />
</node> 

<!-- UFOMap node; Note that the frame_id has to be changed in the cfg -->
  <include file="$(find ufomap_bundled)/launch/server.launch">
    <arg name="resolution" value="0.01" />
    <arg name="num_workers" value="8" />
    <arg name="cloud_in" value="/filtered_cloud" />
    <arg name="information_distribution" value="true" />

    <arg name="num_startpoints" value="$(arg num_startpoints)" />
    <arg name="num_scaling_gridpoints" value="$(arg num_scaling_gridpoints)" />
  </include>
  <!-- <node pkg="rosbag" type="record" name="recorder" output="log" args="-o bag_res_0.01_out_0.01_2 /filtered_cloud /ufomap_server_node/map" required="false"/>  -->
  <!-- <node pkg="ufomap_bundled" type="ufomap_saver_node" name="ufomap_saver_node" output="screen" args="-f map_res_0.01_out_0.01_2.um" required="true" launch-prefix="bash -c 'sleep 32; $0 $@' "/> -->


<group if="$(arg nbv_goals)">
  <node pkg="ur_utilities" type="ur_nbv" name="ur_nbv" output="screen"/>
</group>

<group if="$(arg publish_gain)">
  <node pkg="ur_utilities" type="ur_information_gain" name="ur_information_gain" output="screen"/>
</group>

<include file="$(find ur_launch)/launch/ur10_simulation.launch">
  <arg name="workspace_monitor_mode" value="tf" />
  <arg name="camera_frame" value="true" />
</include>

</launch>

